name: CI (Ultra-light per .cursorrules)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]  # 3.11+ per .cursorrules
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
    
    - name: Install minimal dependencies
      run: poetry install --no-interaction
    
    - name: Run tests (fast & focused)
      run: |
        poetry run pytest tests/ -v --timeout=5
    
    - name: Code quality checks
      run: |
        poetry run ruff check src/
        poetry run black --check src/
        poetry run mypy src/inzwa --ignore-missing-imports
    
    - name: Security checks
      run: |
        # Check for secrets in code
        grep -r "password\|secret\|key" src/ || true
        # Verify no raw logging
        grep -r "logger.*audio_bytes\|logger.*raw_" src/ && exit 1 || true
    
    - name: Performance checks
      run: |
        # Verify functions are <50 lines
        find src/ -name "*.py" -exec sh -c 'awk "/^def / {count=0} {count++} count>50 {print FILENAME": Function >50 lines"; exit 1}" {}' \;

  latency-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Build Docker image
      run: docker build -t inzwa:test .
    
    - name: Test startup time
      run: |
        # Warmup should be <2s per .cursorrules
        timeout 2s docker run --rm inzwa:test python -c "from inzwa import __version__"
